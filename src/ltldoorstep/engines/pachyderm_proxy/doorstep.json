{
  "pipeline": {
    "name": "doorstep"
  },
  "input": {
    "cross": [
      {
        "atom": {
          "name": "processors",
          "repo": "{{ processors }}",
          "branch": "master",
          "glob": "/*"
        }
      },
      {
        "atom": {
          "name": "data",
          "repo": "{{ data }}",
          "branch": "master",
          "glob": "/*"
        }
      }
    ]
  },
  "transform": {
    "image": "docker:dind",
    "cmd": [
      "sh"
    ],
    "stdin": [
      "DIR=$(cat /proc/self/mountinfo | grep ' \\/pfs ' | awk '{print $4}')",
      "INPUT_DATA_DIRECTORY=/pfs/data",
      "mkdir /pfs/out/raw",
      "chown 1000 /pfs/out/raw",
      "chgrp -R 1000 /pfs",
      "chmod -R g+rX /pfs",
      "for processor in $(ls /pfs/processors); do",
      "  CONTEXT=/pfs/processors/$processor/context.json",
      "  cat /pfs/processors/$processor/IMAGE",
      "  DOCKER_IMAGE=\"$(cat /pfs/processors/$processor/IMAGE | grep '^[a-zA-Z0-9:/_\\-]*$')\"",
      "  echo $DOCKER_IMAGE",
      "  LANG=\"$(cat /pfs/processors/$processor/LANG | grep '^[a-zA-Z0-9._-]*$')\"",
      "  if [ -z \"$LANG\" ]",
      "  then",
      "    LANG=C.UTF-8",
      "  fi",
      "  if [ -z \"$DOCKER_IMAGE\" ]",
      "  then",
      "    echo \"No valid docker image provided in /pfs/processors/$processor/IMAGE\"",
      "    exit 2",
      "  fi",
      "  echo \"{{ '\\n'.join(valid_images) }}\" | grep -Fq \"$DOCKER_IMAGE\"",
      "  if [ $? -ne 0 ]",
      "  then",
      "    echo \"Docker image provided is not whitelisted\"",
      "    exit 3",
      "  fi",
      "  docker pull $DOCKER_IMAGE",
      "  if [ -e \"/pfs/processors/$processor/CACHECLEAR\" ]",
      "  then",
      "    docker pull $DOCKER_IMAGE",
      "  fi",
      "  if [ -e \"$CONTEXT\" ]",
      "  then",
      "    INPUT_PROCESSOR=/pfs/processors/$processor",
      "    OUTPUT_FILE=/pfs/out/raw/$processor.json",
      "    echo LANG=$LANG",
      "    echo LINTOL_PROCESSOR_DIRECTORY=$INPUT_PROCESSOR",
      "    echo LINTOL_OUTPUT_FILE=$OUTPUT_FILE",
      "    echo LINTOL_CONTEXT=$CONTEXT",
      "    echo LINTOL_INPUT_DATA=$INPUT_DATA_DIRECTORY",
      "    docker run --rm -v $DIR:/pfs \\",
      "      -e LANG=$LANG \\",
      "      -e LINTOL_PROCESSOR_DIRECTORY=$INPUT_PROCESSOR \\",
      "      -e LINTOL_OUTPUT_FILE=$OUTPUT_FILE \\",
      "      -e LINTOL_CONTEXT=$CONTEXT \\",
      "      -e LINTOL_INPUT_DATA=$INPUT_DATA_DIRECTORY \\",
      "      --user=1000 --net=none --cap-drop=ALL \\",
      "      -t $DOCKER_IMAGE",
      "  fi",
      "done"
    ]
  },
  "parallelism_spec": null,
  "inputs": null,
  "egress": null,
  "update": null,
  "output_branch": null,
  "scale_down_threshold": null,
  "resource_spec": null,
  "description": null,
  "incremental": null,
  "cache_size": null,
  "enable_stats": null,
  "reprocess": null,
  "batch": null
}
